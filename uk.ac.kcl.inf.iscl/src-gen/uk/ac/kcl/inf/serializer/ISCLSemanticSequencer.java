/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.iSCL.ClaimReductionTerm;
import uk.ac.kcl.inf.iSCL.ClaimTerm;
import uk.ac.kcl.inf.iSCL.Company;
import uk.ac.kcl.inf.iSCL.Contract;
import uk.ac.kcl.inf.iSCL.ContractCancellationTerm;
import uk.ac.kcl.inf.iSCL.Customer;
import uk.ac.kcl.inf.iSCL.ISCLPackage;
import uk.ac.kcl.inf.iSCL.InsurableObject;
import uk.ac.kcl.inf.iSCL.PaymentTerm;
import uk.ac.kcl.inf.iSCL.PremiumIncreaseTerm;
import uk.ac.kcl.inf.services.ISCLGrammarAccess;

@SuppressWarnings("all")
public class ISCLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ISCLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ISCLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ISCLPackage.CLAIM_REDUCTION_TERM:
				sequence_ClaimReductionTerm(context, (ClaimReductionTerm) semanticObject); 
				return; 
			case ISCLPackage.CLAIM_TERM:
				sequence_ClaimTerm(context, (ClaimTerm) semanticObject); 
				return; 
			case ISCLPackage.COMPANY:
				sequence_Company(context, (Company) semanticObject); 
				return; 
			case ISCLPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case ISCLPackage.CONTRACT_CANCELLATION_TERM:
				sequence_ContractCancellationTerm(context, (ContractCancellationTerm) semanticObject); 
				return; 
			case ISCLPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case ISCLPackage.INSURABLE_OBJECT:
				sequence_InsurableObject(context, (InsurableObject) semanticObject); 
				return; 
			case ISCLPackage.PAYMENT_TERM:
				sequence_PaymentTerm(context, (PaymentTerm) semanticObject); 
				return; 
			case ISCLPackage.PREMIUM_INCREASE_TERM:
				sequence_PremiumIncreaseTerm(context, (PremiumIncreaseTerm) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ViolationTerm returns ClaimReductionTerm
	 *     ClaimReductionTerm returns ClaimReductionTerm
	 *
	 * Constraint:
	 *     claimReduction=INT
	 */
	protected void sequence_ClaimReductionTerm(ISerializationContext context, ClaimReductionTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.CLAIM_REDUCTION_TERM__CLAIM_REDUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.CLAIM_REDUCTION_TERM__CLAIM_REDUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClaimReductionTermAccess().getClaimReductionINTTerminalRuleCall_1_0(), semanticObject.getClaimReduction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClaimTerm returns ClaimTerm
	 *
	 * Constraint:
	 *     (claim=REAL claimer=[Customer|ADDRESS]?)
	 */
	protected void sequence_ClaimTerm(ISerializationContext context, ClaimTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Company returns Company
	 *
	 * Constraint:
	 *     name=ADDRESS
	 */
	protected void sequence_Company(ISerializationContext context, Company semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.COMPANY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.COMPANY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompanyAccess().getNameADDRESSTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ViolationTerm returns ContractCancellationTerm
	 *     ContractCancellationTerm returns ContractCancellationTerm
	 *
	 * Constraint:
	 *     cancelled?='cancelled'
	 */
	protected void sequence_ContractCancellationTerm(ISerializationContext context, ContractCancellationTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.CONTRACT_CANCELLATION_TERM__CANCELLED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.CONTRACT_CANCELLATION_TERM__CANCELLED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContractCancellationTermAccess().getCancelledCancelledKeyword_0(), semanticObject.isCancelled());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (
	 *         type=ContractType 
	 *         name=EString 
	 *         company=Company 
	 *         customers+=Customer 
	 *         customers+=Customer* 
	 *         insurableObjects+=InsurableObject 
	 *         insurableObjects+=InsurableObject* 
	 *         paymentTerm=PaymentTerm 
	 *         claimTerm=ClaimTerm 
	 *         (violationTerms+=ViolationTerm violationTerms+=ViolationTerm*)?
	 *     )
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (name=ADDRESS coverage=Coverage? participation=INT?)
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InsurableObject returns InsurableObject
	 *
	 * Constraint:
	 *     (name=EString owner=[Customer|ADDRESS]?)
	 */
	protected void sequence_InsurableObject(ISerializationContext context, InsurableObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PaymentTerm returns PaymentTerm
	 *
	 * Constraint:
	 *     (premium=REAL period=INT increase=INT)
	 */
	protected void sequence_PaymentTerm(ISerializationContext context, PaymentTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__PREMIUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__PREMIUM));
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__PERIOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__PERIOD));
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__INCREASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.PAYMENT_TERM__INCREASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPaymentTermAccess().getPremiumREALParserRuleCall_1_0(), semanticObject.getPremium());
		feeder.accept(grammarAccess.getPaymentTermAccess().getPeriodINTTerminalRuleCall_3_0(), semanticObject.getPeriod());
		feeder.accept(grammarAccess.getPaymentTermAccess().getIncreaseINTTerminalRuleCall_5_0(), semanticObject.getIncrease());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ViolationTerm returns PremiumIncreaseTerm
	 *     PremiumIncreaseTerm returns PremiumIncreaseTerm
	 *
	 * Constraint:
	 *     premiumIncrease=INT
	 */
	protected void sequence_PremiumIncreaseTerm(ISerializationContext context, PremiumIncreaseTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ISCLPackage.Literals.PREMIUM_INCREASE_TERM__PREMIUM_INCREASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ISCLPackage.Literals.PREMIUM_INCREASE_TERM__PREMIUM_INCREASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPremiumIncreaseTermAccess().getPremiumIncreaseINTTerminalRuleCall_1_0(), semanticObject.getPremiumIncrease());
		feeder.finish();
	}
	
	
}
