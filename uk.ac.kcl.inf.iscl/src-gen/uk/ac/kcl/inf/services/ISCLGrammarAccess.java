/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ISCLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeContractTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cContractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cBetweenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCompanyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompanyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompanyCompanyParserRuleCall_5_0 = (RuleCall)cCompanyAssignment_5.eContents().get(0);
		private final Keyword cAndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCustomersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCustomersCustomerParserRuleCall_7_0 = (RuleCall)cCustomersAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cCustomersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cCustomersCustomerParserRuleCall_8_1_0 = (RuleCall)cCustomersAssignment_8_1.eContents().get(0);
		private final Keyword cForKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cInsurableObjectsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInsurableObjectsInsurableObjectParserRuleCall_10_0 = (RuleCall)cInsurableObjectsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cInsurableObjectsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cInsurableObjectsInsurableObjectParserRuleCall_11_1_0 = (RuleCall)cInsurableObjectsAssignment_11_1.eContents().get(0);
		private final Keyword cTermsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cPaymentTermAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cPaymentTermPaymentTermParserRuleCall_14_0 = (RuleCall)cPaymentTermAssignment_14.eContents().get(0);
		private final Assignment cClaimTermAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cClaimTermClaimTermParserRuleCall_15_0 = (RuleCall)cClaimTermAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cUponViolationKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cViolationTermsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cViolationTermsViolationTermParserRuleCall_16_1_0 = (RuleCall)cViolationTermsAssignment_16_1.eContents().get(0);
		private final Group cGroup_16_2 = (Group)cGroup_16.eContents().get(2);
		private final Keyword cCommaKeyword_16_2_0 = (Keyword)cGroup_16_2.eContents().get(0);
		private final Assignment cViolationTermsAssignment_16_2_1 = (Assignment)cGroup_16_2.eContents().get(1);
		private final RuleCall cViolationTermsViolationTermParserRuleCall_16_2_1_0 = (RuleCall)cViolationTermsAssignment_16_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//Contract:
		//	type=ContractType 'contract' name=EString 'between'
		//	'company' company=Company
		//	'and' customers+=Customer ("," customers+=Customer)*
		//	'for' insurableObjects+=InsurableObject ("," insurableObjects+=InsurableObject)*
		//	'Terms' '{'
		//	paymentTerm=PaymentTerm
		//	claimTerm=ClaimTerm ('Upon violation' violationTerms+=ViolationTerm ("," violationTerms+=ViolationTerm)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ContractType 'contract' name=EString 'between' 'company' company=Company 'and' customers+=Customer (","
		//customers+=Customer)* 'for' insurableObjects+=InsurableObject ("," insurableObjects+=InsurableObject)* 'Terms' '{'
		//paymentTerm=PaymentTerm claimTerm=ClaimTerm ('Upon violation' violationTerms+=ViolationTerm (","
		//violationTerms+=ViolationTerm)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//type=ContractType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ContractType
		public RuleCall getTypeContractTypeEnumRuleCall_0_0() { return cTypeContractTypeEnumRuleCall_0_0; }
		
		//'contract'
		public Keyword getContractKeyword_1() { return cContractKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'between'
		public Keyword getBetweenKeyword_3() { return cBetweenKeyword_3; }
		
		//'company'
		public Keyword getCompanyKeyword_4() { return cCompanyKeyword_4; }
		
		//company=Company
		public Assignment getCompanyAssignment_5() { return cCompanyAssignment_5; }
		
		//Company
		public RuleCall getCompanyCompanyParserRuleCall_5_0() { return cCompanyCompanyParserRuleCall_5_0; }
		
		//'and'
		public Keyword getAndKeyword_6() { return cAndKeyword_6; }
		
		//customers+=Customer
		public Assignment getCustomersAssignment_7() { return cCustomersAssignment_7; }
		
		//Customer
		public RuleCall getCustomersCustomerParserRuleCall_7_0() { return cCustomersCustomerParserRuleCall_7_0; }
		
		//("," customers+=Customer)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//customers+=Customer
		public Assignment getCustomersAssignment_8_1() { return cCustomersAssignment_8_1; }
		
		//Customer
		public RuleCall getCustomersCustomerParserRuleCall_8_1_0() { return cCustomersCustomerParserRuleCall_8_1_0; }
		
		//'for'
		public Keyword getForKeyword_9() { return cForKeyword_9; }
		
		//insurableObjects+=InsurableObject
		public Assignment getInsurableObjectsAssignment_10() { return cInsurableObjectsAssignment_10; }
		
		//InsurableObject
		public RuleCall getInsurableObjectsInsurableObjectParserRuleCall_10_0() { return cInsurableObjectsInsurableObjectParserRuleCall_10_0; }
		
		//("," insurableObjects+=InsurableObject)*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//insurableObjects+=InsurableObject
		public Assignment getInsurableObjectsAssignment_11_1() { return cInsurableObjectsAssignment_11_1; }
		
		//InsurableObject
		public RuleCall getInsurableObjectsInsurableObjectParserRuleCall_11_1_0() { return cInsurableObjectsInsurableObjectParserRuleCall_11_1_0; }
		
		//'Terms'
		public Keyword getTermsKeyword_12() { return cTermsKeyword_12; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_13() { return cLeftCurlyBracketKeyword_13; }
		
		//paymentTerm=PaymentTerm
		public Assignment getPaymentTermAssignment_14() { return cPaymentTermAssignment_14; }
		
		//PaymentTerm
		public RuleCall getPaymentTermPaymentTermParserRuleCall_14_0() { return cPaymentTermPaymentTermParserRuleCall_14_0; }
		
		//claimTerm=ClaimTerm
		public Assignment getClaimTermAssignment_15() { return cClaimTermAssignment_15; }
		
		//ClaimTerm
		public RuleCall getClaimTermClaimTermParserRuleCall_15_0() { return cClaimTermClaimTermParserRuleCall_15_0; }
		
		//('Upon violation' violationTerms+=ViolationTerm ("," violationTerms+=ViolationTerm)*)?
		public Group getGroup_16() { return cGroup_16; }
		
		//'Upon violation'
		public Keyword getUponViolationKeyword_16_0() { return cUponViolationKeyword_16_0; }
		
		//violationTerms+=ViolationTerm
		public Assignment getViolationTermsAssignment_16_1() { return cViolationTermsAssignment_16_1; }
		
		//ViolationTerm
		public RuleCall getViolationTermsViolationTermParserRuleCall_16_1_0() { return cViolationTermsViolationTermParserRuleCall_16_1_0; }
		
		//("," violationTerms+=ViolationTerm)*
		public Group getGroup_16_2() { return cGroup_16_2; }
		
		//","
		public Keyword getCommaKeyword_16_2_0() { return cCommaKeyword_16_2_0; }
		
		//violationTerms+=ViolationTerm
		public Assignment getViolationTermsAssignment_16_2_1() { return cViolationTermsAssignment_16_2_1; }
		
		//ViolationTerm
		public RuleCall getViolationTermsViolationTermParserRuleCall_16_2_1_0() { return cViolationTermsViolationTermParserRuleCall_16_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class PaymentTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.PaymentTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmountOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPremiumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPremiumREALParserRuleCall_1_0 = (RuleCall)cPremiumAssignment_1.eContents().get(0);
		private final Keyword cPayableEveryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPeriodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPeriodINTTerminalRuleCall_3_0 = (RuleCall)cPeriodAssignment_3.eContents().get(0);
		private final Keyword cDaysKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIncreaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIncreaseINTTerminalRuleCall_5_0 = (RuleCall)cIncreaseAssignment_5.eContents().get(0);
		private final Keyword cPercentSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIncreasePerClaimKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PaymentTerm:
		//	'Amount of' premium=REAL 'payable every' period=INT 'days' increase=INT '%' 'increase per claim';
		@Override public ParserRule getRule() { return rule; }
		
		//'Amount of' premium=REAL 'payable every' period=INT 'days' increase=INT '%' 'increase per claim'
		public Group getGroup() { return cGroup; }
		
		//'Amount of'
		public Keyword getAmountOfKeyword_0() { return cAmountOfKeyword_0; }
		
		//premium=REAL
		public Assignment getPremiumAssignment_1() { return cPremiumAssignment_1; }
		
		//REAL
		public RuleCall getPremiumREALParserRuleCall_1_0() { return cPremiumREALParserRuleCall_1_0; }
		
		//'payable every'
		public Keyword getPayableEveryKeyword_2() { return cPayableEveryKeyword_2; }
		
		//period=INT
		public Assignment getPeriodAssignment_3() { return cPeriodAssignment_3; }
		
		//INT
		public RuleCall getPeriodINTTerminalRuleCall_3_0() { return cPeriodINTTerminalRuleCall_3_0; }
		
		//'days'
		public Keyword getDaysKeyword_4() { return cDaysKeyword_4; }
		
		//increase=INT
		public Assignment getIncreaseAssignment_5() { return cIncreaseAssignment_5; }
		
		//INT
		public RuleCall getIncreaseINTTerminalRuleCall_5_0() { return cIncreaseINTTerminalRuleCall_5_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_6() { return cPercentSignKeyword_6; }
		
		//'increase per claim'
		public Keyword getIncreasePerClaimKeyword_7() { return cIncreasePerClaimKeyword_7; }
	}
	public class ClaimTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ClaimTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmountOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClaimAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClaimREALParserRuleCall_1_0 = (RuleCall)cClaimAssignment_1.eContents().get(0);
		private final Keyword cClaimedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClaimerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cClaimerCustomerCrossReference_3_1_0 = (CrossReference)cClaimerAssignment_3_1.eContents().get(0);
		private final RuleCall cClaimerCustomerADDRESSTerminalRuleCall_3_1_0_1 = (RuleCall)cClaimerCustomerCrossReference_3_1_0.eContents().get(1);
		
		//ClaimTerm:
		//	'Amount of' claim=REAL 'claimed' ('by' claimer=[Customer|ADDRESS])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Amount of' claim=REAL 'claimed' ('by' claimer=[Customer|ADDRESS])?
		public Group getGroup() { return cGroup; }
		
		//'Amount of'
		public Keyword getAmountOfKeyword_0() { return cAmountOfKeyword_0; }
		
		//claim=REAL
		public Assignment getClaimAssignment_1() { return cClaimAssignment_1; }
		
		//REAL
		public RuleCall getClaimREALParserRuleCall_1_0() { return cClaimREALParserRuleCall_1_0; }
		
		//'claimed'
		public Keyword getClaimedKeyword_2() { return cClaimedKeyword_2; }
		
		//('by' claimer=[Customer|ADDRESS])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'by'
		public Keyword getByKeyword_3_0() { return cByKeyword_3_0; }
		
		//claimer=[Customer|ADDRESS]
		public Assignment getClaimerAssignment_3_1() { return cClaimerAssignment_3_1; }
		
		//[Customer|ADDRESS]
		public CrossReference getClaimerCustomerCrossReference_3_1_0() { return cClaimerCustomerCrossReference_3_1_0; }
		
		//ADDRESS
		public RuleCall getClaimerCustomerADDRESSTerminalRuleCall_3_1_0_1() { return cClaimerCustomerADDRESSTerminalRuleCall_3_1_0_1; }
	}
	public class ViolationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ViolationTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContractCancellationTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClaimReductionTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPremiumIncreaseTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ViolationTerm:
		//	ContractCancellationTerm | ClaimReductionTerm | PremiumIncreaseTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//ContractCancellationTerm | ClaimReductionTerm | PremiumIncreaseTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContractCancellationTerm
		public RuleCall getContractCancellationTermParserRuleCall_0() { return cContractCancellationTermParserRuleCall_0; }
		
		//ClaimReductionTerm
		public RuleCall getClaimReductionTermParserRuleCall_1() { return cClaimReductionTermParserRuleCall_1; }
		
		//PremiumIncreaseTerm
		public RuleCall getPremiumIncreaseTermParserRuleCall_2() { return cPremiumIncreaseTermParserRuleCall_2; }
	}
	public class ContractCancellationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ContractCancellationTerm");
		private final Assignment cCancelledAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCancelledCancelledKeyword_0 = (Keyword)cCancelledAssignment.eContents().get(0);
		
		//ContractCancellationTerm:
		//	cancelled?='cancelled';
		@Override public ParserRule getRule() { return rule; }
		
		//cancelled?='cancelled'
		public Assignment getCancelledAssignment() { return cCancelledAssignment; }
		
		//'cancelled'
		public Keyword getCancelledCancelledKeyword_0() { return cCancelledCancelledKeyword_0; }
	}
	public class ClaimReductionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ClaimReductionTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimReducedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClaimReductionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClaimReductionINTTerminalRuleCall_1_0 = (RuleCall)cClaimReductionAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClaimReductionTerm:
		//	'claim reduced by' claimReduction=INT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'claim reduced by' claimReduction=INT '%'
		public Group getGroup() { return cGroup; }
		
		//'claim reduced by'
		public Keyword getClaimReducedByKeyword_0() { return cClaimReducedByKeyword_0; }
		
		//claimReduction=INT
		public Assignment getClaimReductionAssignment_1() { return cClaimReductionAssignment_1; }
		
		//INT
		public RuleCall getClaimReductionINTTerminalRuleCall_1_0() { return cClaimReductionINTTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class PremiumIncreaseTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.PremiumIncreaseTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPremiumIncreasedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPremiumIncreaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPremiumIncreaseINTTerminalRuleCall_1_0 = (RuleCall)cPremiumIncreaseAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PremiumIncreaseTerm:
		//	'premium increased by' premiumIncrease=INT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'premium increased by' premiumIncrease=INT '%'
		public Group getGroup() { return cGroup; }
		
		//'premium increased by'
		public Keyword getPremiumIncreasedByKeyword_0() { return cPremiumIncreasedByKeyword_0; }
		
		//premiumIncrease=INT
		public Assignment getPremiumIncreaseAssignment_1() { return cPremiumIncreaseAssignment_1; }
		
		//INT
		public RuleCall getPremiumIncreaseINTTerminalRuleCall_1_0() { return cPremiumIncreaseINTTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class CustomerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.Customer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomerWithAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameADDRESSTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCoverageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCoverageCoverageEnumRuleCall_2_1_0 = (RuleCall)cCoverageAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cParticipatesWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParticipationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParticipationINTTerminalRuleCall_3_1_0 = (RuleCall)cParticipationAssignment_3_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Customer:
		//	'customer with address' name=ADDRESS ('is' coverage=Coverage)? ('participates with' participation=INT '%')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'customer with address' name=ADDRESS ('is' coverage=Coverage)? ('participates with' participation=INT '%')?
		public Group getGroup() { return cGroup; }
		
		//'customer with address'
		public Keyword getCustomerWithAddressKeyword_0() { return cCustomerWithAddressKeyword_0; }
		
		//name=ADDRESS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ADDRESS
		public RuleCall getNameADDRESSTerminalRuleCall_1_0() { return cNameADDRESSTerminalRuleCall_1_0; }
		
		//('is' coverage=Coverage)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//coverage=Coverage
		public Assignment getCoverageAssignment_2_1() { return cCoverageAssignment_2_1; }
		
		//Coverage
		public RuleCall getCoverageCoverageEnumRuleCall_2_1_0() { return cCoverageCoverageEnumRuleCall_2_1_0; }
		
		//('participates with' participation=INT '%')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'participates with'
		public Keyword getParticipatesWithKeyword_3_0() { return cParticipatesWithKeyword_3_0; }
		
		//participation=INT
		public Assignment getParticipationAssignment_3_1() { return cParticipationAssignment_3_1; }
		
		//INT
		public RuleCall getParticipationINTTerminalRuleCall_3_1_0() { return cParticipationINTTerminalRuleCall_3_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3_2() { return cPercentSignKeyword_3_2; }
	}
	public class CompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.Company");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameADDRESSTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Company:
		//	'with address' name=ADDRESS;
		@Override public ParserRule getRule() { return rule; }
		
		//'with address' name=ADDRESS
		public Group getGroup() { return cGroup; }
		
		//'with address'
		public Keyword getWithAddressKeyword_0() { return cWithAddressKeyword_0; }
		
		//name=ADDRESS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ADDRESS
		public RuleCall getNameADDRESSTerminalRuleCall_1_0() { return cNameADDRESSTerminalRuleCall_1_0; }
	}
	public class InsurableObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.InsurableObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOwnedByKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOwnerCustomerCrossReference_2_1_0 = (CrossReference)cOwnerAssignment_2_1.eContents().get(0);
		private final RuleCall cOwnerCustomerADDRESSTerminalRuleCall_2_1_0_1 = (RuleCall)cOwnerCustomerCrossReference_2_1_0.eContents().get(1);
		
		//InsurableObject:
		//	'object' name=EString ('owned by' owner=[Customer|ADDRESS])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' name=EString ('owned by' owner=[Customer|ADDRESS])?
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('owned by' owner=[Customer|ADDRESS])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'owned by'
		public Keyword getOwnedByKeyword_2_0() { return cOwnedByKeyword_2_0; }
		
		//owner=[Customer|ADDRESS]
		public Assignment getOwnerAssignment_2_1() { return cOwnerAssignment_2_1; }
		
		//[Customer|ADDRESS]
		public CrossReference getOwnerCustomerCrossReference_2_1_0() { return cOwnerCustomerCrossReference_2_1_0; }
		
		//ADDRESS
		public RuleCall getOwnerCustomerADDRESSTerminalRuleCall_2_1_0_1() { return cOwnerCustomerADDRESSTerminalRuleCall_2_1_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class ContractTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ContractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPersonalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPersonalPersonalKeyword_0_0 = (Keyword)cPersonalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPoolEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPoolPoolKeyword_1_0 = (Keyword)cPoolEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFamilyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFamilyFamilyKeyword_2_0 = (Keyword)cFamilyEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ContractType:
		//	personal | pool | family;
		public EnumRule getRule() { return rule; }
		
		//personal | pool | family
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//personal
		public EnumLiteralDeclaration getPersonalEnumLiteralDeclaration_0() { return cPersonalEnumLiteralDeclaration_0; }
		
		//"personal"
		public Keyword getPersonalPersonalKeyword_0_0() { return cPersonalPersonalKeyword_0_0; }
		
		//pool
		public EnumLiteralDeclaration getPoolEnumLiteralDeclaration_1() { return cPoolEnumLiteralDeclaration_1; }
		
		//"pool"
		public Keyword getPoolPoolKeyword_1_0() { return cPoolPoolKeyword_1_0; }
		
		//family
		public EnumLiteralDeclaration getFamilyEnumLiteralDeclaration_2() { return cFamilyEnumLiteralDeclaration_2; }
		
		//"family"
		public Keyword getFamilyFamilyKeyword_2_0() { return cFamilyFamilyKeyword_2_0; }
	}
	public class CoverageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.Coverage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBeneficiaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBeneficiaryBeneficiaryKeyword_0_0 = (Keyword)cBeneficiaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOwnerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOwnerOwnerKeyword_1_0 = (Keyword)cOwnerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Coverage:
		//	beneficiary | owner;
		public EnumRule getRule() { return rule; }
		
		//beneficiary | owner
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//beneficiary
		public EnumLiteralDeclaration getBeneficiaryEnumLiteralDeclaration_0() { return cBeneficiaryEnumLiteralDeclaration_0; }
		
		//"beneficiary"
		public Keyword getBeneficiaryBeneficiaryKeyword_0_0() { return cBeneficiaryBeneficiaryKeyword_0_0; }
		
		//owner
		public EnumLiteralDeclaration getOwnerEnumLiteralDeclaration_1() { return cOwnerEnumLiteralDeclaration_1; }
		
		//"owner"
		public Keyword getOwnerOwnerKeyword_1_0() { return cOwnerOwnerKeyword_1_0; }
	}
	
	private final ContractElements pContract;
	private final ContractTypeElements eContractType;
	private final CoverageElements eCoverage;
	private final PaymentTermElements pPaymentTerm;
	private final ClaimTermElements pClaimTerm;
	private final ViolationTermElements pViolationTerm;
	private final ContractCancellationTermElements pContractCancellationTerm;
	private final ClaimReductionTermElements pClaimReductionTerm;
	private final PremiumIncreaseTermElements pPremiumIncreaseTerm;
	private final CustomerElements pCustomer;
	private final CompanyElements pCompany;
	private final InsurableObjectElements pInsurableObject;
	private final TerminalRule tADDRESS;
	private final REALElements pREAL;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ISCLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContract = new ContractElements();
		this.eContractType = new ContractTypeElements();
		this.eCoverage = new CoverageElements();
		this.pPaymentTerm = new PaymentTermElements();
		this.pClaimTerm = new ClaimTermElements();
		this.pViolationTerm = new ViolationTermElements();
		this.pContractCancellationTerm = new ContractCancellationTermElements();
		this.pClaimReductionTerm = new ClaimReductionTermElements();
		this.pPremiumIncreaseTerm = new PremiumIncreaseTermElements();
		this.pCustomer = new CustomerElements();
		this.pCompany = new CompanyElements();
		this.pInsurableObject = new InsurableObjectElements();
		this.tADDRESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.ISCL.ADDRESS");
		this.pREAL = new REALElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.ISCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Contract:
	//	type=ContractType 'contract' name=EString 'between'
	//	'company' company=Company
	//	'and' customers+=Customer ("," customers+=Customer)*
	//	'for' insurableObjects+=InsurableObject ("," insurableObjects+=InsurableObject)*
	//	'Terms' '{'
	//	paymentTerm=PaymentTerm
	//	claimTerm=ClaimTerm ('Upon violation' violationTerms+=ViolationTerm ("," violationTerms+=ViolationTerm)*)?
	//	'}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//enum ContractType:
	//	personal | pool | family;
	public ContractTypeElements getContractTypeAccess() {
		return eContractType;
	}
	
	public EnumRule getContractTypeRule() {
		return getContractTypeAccess().getRule();
	}
	
	//enum Coverage:
	//	beneficiary | owner;
	public CoverageElements getCoverageAccess() {
		return eCoverage;
	}
	
	public EnumRule getCoverageRule() {
		return getCoverageAccess().getRule();
	}
	
	//PaymentTerm:
	//	'Amount of' premium=REAL 'payable every' period=INT 'days' increase=INT '%' 'increase per claim';
	public PaymentTermElements getPaymentTermAccess() {
		return pPaymentTerm;
	}
	
	public ParserRule getPaymentTermRule() {
		return getPaymentTermAccess().getRule();
	}
	
	//ClaimTerm:
	//	'Amount of' claim=REAL 'claimed' ('by' claimer=[Customer|ADDRESS])?;
	public ClaimTermElements getClaimTermAccess() {
		return pClaimTerm;
	}
	
	public ParserRule getClaimTermRule() {
		return getClaimTermAccess().getRule();
	}
	
	//ViolationTerm:
	//	ContractCancellationTerm | ClaimReductionTerm | PremiumIncreaseTerm;
	public ViolationTermElements getViolationTermAccess() {
		return pViolationTerm;
	}
	
	public ParserRule getViolationTermRule() {
		return getViolationTermAccess().getRule();
	}
	
	//ContractCancellationTerm:
	//	cancelled?='cancelled';
	public ContractCancellationTermElements getContractCancellationTermAccess() {
		return pContractCancellationTerm;
	}
	
	public ParserRule getContractCancellationTermRule() {
		return getContractCancellationTermAccess().getRule();
	}
	
	//ClaimReductionTerm:
	//	'claim reduced by' claimReduction=INT '%';
	public ClaimReductionTermElements getClaimReductionTermAccess() {
		return pClaimReductionTerm;
	}
	
	public ParserRule getClaimReductionTermRule() {
		return getClaimReductionTermAccess().getRule();
	}
	
	//PremiumIncreaseTerm:
	//	'premium increased by' premiumIncrease=INT '%';
	public PremiumIncreaseTermElements getPremiumIncreaseTermAccess() {
		return pPremiumIncreaseTerm;
	}
	
	public ParserRule getPremiumIncreaseTermRule() {
		return getPremiumIncreaseTermAccess().getRule();
	}
	
	//Customer:
	//	'customer with address' name=ADDRESS ('is' coverage=Coverage)? ('participates with' participation=INT '%')?;
	public CustomerElements getCustomerAccess() {
		return pCustomer;
	}
	
	public ParserRule getCustomerRule() {
		return getCustomerAccess().getRule();
	}
	
	//Company:
	//	'with address' name=ADDRESS;
	public CompanyElements getCompanyAccess() {
		return pCompany;
	}
	
	public ParserRule getCompanyRule() {
		return getCompanyAccess().getRule();
	}
	
	//InsurableObject:
	//	'object' name=EString ('owned by' owner=[Customer|ADDRESS])?;
	public InsurableObjectElements getInsurableObjectAccess() {
		return pInsurableObject;
	}
	
	public ParserRule getInsurableObjectRule() {
		return getInsurableObjectAccess().getRule();
	}
	
	//terminal ADDRESS:
	//	'0x' ('a'..'z' | 'A'..'Z' | '0'..'9')+;
	public TerminalRule getADDRESSRule() {
		return tADDRESS;
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
