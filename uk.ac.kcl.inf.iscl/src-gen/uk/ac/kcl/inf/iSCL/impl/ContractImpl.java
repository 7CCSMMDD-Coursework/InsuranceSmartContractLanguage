/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.iSCL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.iSCL.ClaimTerm;
import uk.ac.kcl.inf.iSCL.Company;
import uk.ac.kcl.inf.iSCL.Contract;
import uk.ac.kcl.inf.iSCL.ContractType;
import uk.ac.kcl.inf.iSCL.Customer;
import uk.ac.kcl.inf.iSCL.ISCLPackage;
import uk.ac.kcl.inf.iSCL.InsurableObject;
import uk.ac.kcl.inf.iSCL.PaymentTerm;
import uk.ac.kcl.inf.iSCL.ViolationTerm;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contract</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getType <em>Type</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getName <em>Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getCompany <em>Company</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getCustomers <em>Customers</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getInsurableObjects <em>Insurable Objects</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getPaymentTerm <em>Payment Term</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getClaimTerm <em>Claim Term</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.iSCL.impl.ContractImpl#getViolationTerms <em>Violation Terms</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContractImpl extends MinimalEObjectImpl.Container implements Contract
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final ContractType TYPE_EDEFAULT = ContractType.PERSONAL;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected ContractType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCompany() <em>Company</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompany()
   * @generated
   * @ordered
   */
  protected Company company;

  /**
   * The cached value of the '{@link #getCustomers() <em>Customers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomers()
   * @generated
   * @ordered
   */
  protected EList<Customer> customers;

  /**
   * The cached value of the '{@link #getInsurableObjects() <em>Insurable Objects</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInsurableObjects()
   * @generated
   * @ordered
   */
  protected EList<InsurableObject> insurableObjects;

  /**
   * The cached value of the '{@link #getPaymentTerm() <em>Payment Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPaymentTerm()
   * @generated
   * @ordered
   */
  protected PaymentTerm paymentTerm;

  /**
   * The cached value of the '{@link #getClaimTerm() <em>Claim Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClaimTerm()
   * @generated
   * @ordered
   */
  protected ClaimTerm claimTerm;

  /**
   * The cached value of the '{@link #getViolationTerms() <em>Violation Terms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViolationTerms()
   * @generated
   * @ordered
   */
  protected EList<ViolationTerm> violationTerms;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ISCLPackage.Literals.CONTRACT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(ContractType newType)
  {
    ContractType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Company getCompany()
  {
    return company;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompany(Company newCompany, NotificationChain msgs)
  {
    Company oldCompany = company;
    company = newCompany;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__COMPANY, oldCompany, newCompany);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompany(Company newCompany)
  {
    if (newCompany != company)
    {
      NotificationChain msgs = null;
      if (company != null)
        msgs = ((InternalEObject)company).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__COMPANY, null, msgs);
      if (newCompany != null)
        msgs = ((InternalEObject)newCompany).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__COMPANY, null, msgs);
      msgs = basicSetCompany(newCompany, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__COMPANY, newCompany, newCompany));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Customer> getCustomers()
  {
    if (customers == null)
    {
      customers = new EObjectContainmentEList<Customer>(Customer.class, this, ISCLPackage.CONTRACT__CUSTOMERS);
    }
    return customers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InsurableObject> getInsurableObjects()
  {
    if (insurableObjects == null)
    {
      insurableObjects = new EObjectContainmentEList<InsurableObject>(InsurableObject.class, this, ISCLPackage.CONTRACT__INSURABLE_OBJECTS);
    }
    return insurableObjects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PaymentTerm getPaymentTerm()
  {
    return paymentTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPaymentTerm(PaymentTerm newPaymentTerm, NotificationChain msgs)
  {
    PaymentTerm oldPaymentTerm = paymentTerm;
    paymentTerm = newPaymentTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__PAYMENT_TERM, oldPaymentTerm, newPaymentTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPaymentTerm(PaymentTerm newPaymentTerm)
  {
    if (newPaymentTerm != paymentTerm)
    {
      NotificationChain msgs = null;
      if (paymentTerm != null)
        msgs = ((InternalEObject)paymentTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__PAYMENT_TERM, null, msgs);
      if (newPaymentTerm != null)
        msgs = ((InternalEObject)newPaymentTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__PAYMENT_TERM, null, msgs);
      msgs = basicSetPaymentTerm(newPaymentTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__PAYMENT_TERM, newPaymentTerm, newPaymentTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClaimTerm getClaimTerm()
  {
    return claimTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClaimTerm(ClaimTerm newClaimTerm, NotificationChain msgs)
  {
    ClaimTerm oldClaimTerm = claimTerm;
    claimTerm = newClaimTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__CLAIM_TERM, oldClaimTerm, newClaimTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClaimTerm(ClaimTerm newClaimTerm)
  {
    if (newClaimTerm != claimTerm)
    {
      NotificationChain msgs = null;
      if (claimTerm != null)
        msgs = ((InternalEObject)claimTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__CLAIM_TERM, null, msgs);
      if (newClaimTerm != null)
        msgs = ((InternalEObject)newClaimTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ISCLPackage.CONTRACT__CLAIM_TERM, null, msgs);
      msgs = basicSetClaimTerm(newClaimTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ISCLPackage.CONTRACT__CLAIM_TERM, newClaimTerm, newClaimTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ViolationTerm> getViolationTerms()
  {
    if (violationTerms == null)
    {
      violationTerms = new EObjectContainmentEList<ViolationTerm>(ViolationTerm.class, this, ISCLPackage.CONTRACT__VIOLATION_TERMS);
    }
    return violationTerms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ISCLPackage.CONTRACT__COMPANY:
        return basicSetCompany(null, msgs);
      case ISCLPackage.CONTRACT__CUSTOMERS:
        return ((InternalEList<?>)getCustomers()).basicRemove(otherEnd, msgs);
      case ISCLPackage.CONTRACT__INSURABLE_OBJECTS:
        return ((InternalEList<?>)getInsurableObjects()).basicRemove(otherEnd, msgs);
      case ISCLPackage.CONTRACT__PAYMENT_TERM:
        return basicSetPaymentTerm(null, msgs);
      case ISCLPackage.CONTRACT__CLAIM_TERM:
        return basicSetClaimTerm(null, msgs);
      case ISCLPackage.CONTRACT__VIOLATION_TERMS:
        return ((InternalEList<?>)getViolationTerms()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ISCLPackage.CONTRACT__TYPE:
        return getType();
      case ISCLPackage.CONTRACT__NAME:
        return getName();
      case ISCLPackage.CONTRACT__COMPANY:
        return getCompany();
      case ISCLPackage.CONTRACT__CUSTOMERS:
        return getCustomers();
      case ISCLPackage.CONTRACT__INSURABLE_OBJECTS:
        return getInsurableObjects();
      case ISCLPackage.CONTRACT__PAYMENT_TERM:
        return getPaymentTerm();
      case ISCLPackage.CONTRACT__CLAIM_TERM:
        return getClaimTerm();
      case ISCLPackage.CONTRACT__VIOLATION_TERMS:
        return getViolationTerms();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ISCLPackage.CONTRACT__TYPE:
        setType((ContractType)newValue);
        return;
      case ISCLPackage.CONTRACT__NAME:
        setName((String)newValue);
        return;
      case ISCLPackage.CONTRACT__COMPANY:
        setCompany((Company)newValue);
        return;
      case ISCLPackage.CONTRACT__CUSTOMERS:
        getCustomers().clear();
        getCustomers().addAll((Collection<? extends Customer>)newValue);
        return;
      case ISCLPackage.CONTRACT__INSURABLE_OBJECTS:
        getInsurableObjects().clear();
        getInsurableObjects().addAll((Collection<? extends InsurableObject>)newValue);
        return;
      case ISCLPackage.CONTRACT__PAYMENT_TERM:
        setPaymentTerm((PaymentTerm)newValue);
        return;
      case ISCLPackage.CONTRACT__CLAIM_TERM:
        setClaimTerm((ClaimTerm)newValue);
        return;
      case ISCLPackage.CONTRACT__VIOLATION_TERMS:
        getViolationTerms().clear();
        getViolationTerms().addAll((Collection<? extends ViolationTerm>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ISCLPackage.CONTRACT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case ISCLPackage.CONTRACT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ISCLPackage.CONTRACT__COMPANY:
        setCompany((Company)null);
        return;
      case ISCLPackage.CONTRACT__CUSTOMERS:
        getCustomers().clear();
        return;
      case ISCLPackage.CONTRACT__INSURABLE_OBJECTS:
        getInsurableObjects().clear();
        return;
      case ISCLPackage.CONTRACT__PAYMENT_TERM:
        setPaymentTerm((PaymentTerm)null);
        return;
      case ISCLPackage.CONTRACT__CLAIM_TERM:
        setClaimTerm((ClaimTerm)null);
        return;
      case ISCLPackage.CONTRACT__VIOLATION_TERMS:
        getViolationTerms().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ISCLPackage.CONTRACT__TYPE:
        return type != TYPE_EDEFAULT;
      case ISCLPackage.CONTRACT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ISCLPackage.CONTRACT__COMPANY:
        return company != null;
      case ISCLPackage.CONTRACT__CUSTOMERS:
        return customers != null && !customers.isEmpty();
      case ISCLPackage.CONTRACT__INSURABLE_OBJECTS:
        return insurableObjects != null && !insurableObjects.isEmpty();
      case ISCLPackage.CONTRACT__PAYMENT_TERM:
        return paymentTerm != null;
      case ISCLPackage.CONTRACT__CLAIM_TERM:
        return claimTerm != null;
      case ISCLPackage.CONTRACT__VIOLATION_TERMS:
        return violationTerms != null && !violationTerms.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ContractImpl
