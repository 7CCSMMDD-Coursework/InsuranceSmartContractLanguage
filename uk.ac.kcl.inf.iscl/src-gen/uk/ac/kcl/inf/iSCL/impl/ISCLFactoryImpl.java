/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.iSCL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.iSCL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ISCLFactoryImpl extends EFactoryImpl implements ISCLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ISCLFactory init()
  {
    try
    {
      ISCLFactory theISCLFactory = (ISCLFactory)EPackage.Registry.INSTANCE.getEFactory(ISCLPackage.eNS_URI);
      if (theISCLFactory != null)
      {
        return theISCLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ISCLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ISCLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ISCLPackage.CONTRACT: return createContract();
      case ISCLPackage.PAYMENT_TERM: return createPaymentTerm();
      case ISCLPackage.CLAIM_TERM: return createClaimTerm();
      case ISCLPackage.VIOLATION_TERM: return createViolationTerm();
      case ISCLPackage.CONTRACT_CANCELLATION_TERM: return createContractCancellationTerm();
      case ISCLPackage.CLAIM_REDUCTION_TERM: return createClaimReductionTerm();
      case ISCLPackage.PREMIUM_INCREASE_TERM: return createPremiumIncreaseTerm();
      case ISCLPackage.CUSTOMER: return createCustomer();
      case ISCLPackage.COMPANY: return createCompany();
      case ISCLPackage.INSURABLE_OBJECT: return createInsurableObject();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ISCLPackage.CONTRACT_TYPE:
        return createContractTypeFromString(eDataType, initialValue);
      case ISCLPackage.COVERAGE:
        return createCoverageFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ISCLPackage.CONTRACT_TYPE:
        return convertContractTypeToString(eDataType, instanceValue);
      case ISCLPackage.COVERAGE:
        return convertCoverageToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PaymentTerm createPaymentTerm()
  {
    PaymentTermImpl paymentTerm = new PaymentTermImpl();
    return paymentTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClaimTerm createClaimTerm()
  {
    ClaimTermImpl claimTerm = new ClaimTermImpl();
    return claimTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ViolationTerm createViolationTerm()
  {
    ViolationTermImpl violationTerm = new ViolationTermImpl();
    return violationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractCancellationTerm createContractCancellationTerm()
  {
    ContractCancellationTermImpl contractCancellationTerm = new ContractCancellationTermImpl();
    return contractCancellationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClaimReductionTerm createClaimReductionTerm()
  {
    ClaimReductionTermImpl claimReductionTerm = new ClaimReductionTermImpl();
    return claimReductionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PremiumIncreaseTerm createPremiumIncreaseTerm()
  {
    PremiumIncreaseTermImpl premiumIncreaseTerm = new PremiumIncreaseTermImpl();
    return premiumIncreaseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Customer createCustomer()
  {
    CustomerImpl customer = new CustomerImpl();
    return customer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Company createCompany()
  {
    CompanyImpl company = new CompanyImpl();
    return company;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InsurableObject createInsurableObject()
  {
    InsurableObjectImpl insurableObject = new InsurableObjectImpl();
    return insurableObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContractType createContractTypeFromString(EDataType eDataType, String initialValue)
  {
    ContractType result = ContractType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContractTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coverage createCoverageFromString(EDataType eDataType, String initialValue)
  {
    Coverage result = Coverage.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCoverageToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ISCLPackage getISCLPackage()
  {
    return (ISCLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ISCLPackage getPackage()
  {
    return ISCLPackage.eINSTANCE;
  }

} //ISCLFactoryImpl
