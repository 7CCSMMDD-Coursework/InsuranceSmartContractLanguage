/*
 * generated by Xtext 2.20.0
 */
grammar InternalISCL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.services.ISCLGrammarAccess;

}

@parser::members {

 	private ISCLGrammarAccess grammarAccess;

    public InternalISCLParser(TokenStream input, ISCLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Contract";
   	}

   	@Override
   	protected ISCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleContract
entryRuleContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractRule()); }
	iv_ruleContract=ruleContract
	{ $current=$iv_ruleContract.current; }
	EOF;

// Rule Contract
ruleContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getTypeContractTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleContractType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"uk.ac.kcl.inf.ISCL.ContractType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='contract'
		{
			newLeafNode(otherlv_1, grammarAccess.getContractAccess().getContractKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"uk.ac.kcl.inf.ISCL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='between'
		{
			newLeafNode(otherlv_3, grammarAccess.getContractAccess().getBetweenKeyword_3());
		}
		otherlv_4='company'
		{
			newLeafNode(otherlv_4, grammarAccess.getContractAccess().getCompanyKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getCompanyCompanyParserRuleCall_5_0());
				}
				lv_company_5_0=ruleCompany
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"company",
						lv_company_5_0,
						"uk.ac.kcl.inf.ISCL.Company");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='and'
		{
			newLeafNode(otherlv_6, grammarAccess.getContractAccess().getAndKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getCustomersCustomerParserRuleCall_7_0());
				}
				lv_customers_7_0=ruleCustomer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					add(
						$current,
						"customers",
						lv_customers_7_0,
						"uk.ac.kcl.inf.ISCL.Customer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getContractAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractAccess().getCustomersCustomerParserRuleCall_8_1_0());
					}
					lv_customers_9_0=ruleCustomer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractRule());
						}
						add(
							$current,
							"customers",
							lv_customers_9_0,
							"uk.ac.kcl.inf.ISCL.Customer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='for'
		{
			newLeafNode(otherlv_10, grammarAccess.getContractAccess().getForKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getInsurableObjectsInsurableObjectParserRuleCall_10_0());
				}
				lv_insurableObjects_11_0=ruleInsurableObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					add(
						$current,
						"insurableObjects",
						lv_insurableObjects_11_0,
						"uk.ac.kcl.inf.ISCL.InsurableObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_12=','
			{
				newLeafNode(otherlv_12, grammarAccess.getContractAccess().getCommaKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractAccess().getInsurableObjectsInsurableObjectParserRuleCall_11_1_0());
					}
					lv_insurableObjects_13_0=ruleInsurableObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractRule());
						}
						add(
							$current,
							"insurableObjects",
							lv_insurableObjects_13_0,
							"uk.ac.kcl.inf.ISCL.InsurableObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_14='Terms'
		{
			newLeafNode(otherlv_14, grammarAccess.getContractAccess().getTermsKeyword_12());
		}
		otherlv_15='{'
		{
			newLeafNode(otherlv_15, grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getPaymentTermPaymentTermParserRuleCall_14_0());
				}
				lv_paymentTerm_16_0=rulePaymentTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"paymentTerm",
						lv_paymentTerm_16_0,
						"uk.ac.kcl.inf.ISCL.PaymentTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getClaimTermClaimTermParserRuleCall_15_0());
				}
				lv_claimTerm_17_0=ruleClaimTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"claimTerm",
						lv_claimTerm_17_0,
						"uk.ac.kcl.inf.ISCL.ClaimTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_18='Upon violation'
			{
				newLeafNode(otherlv_18, grammarAccess.getContractAccess().getUponViolationKeyword_16_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractAccess().getViolationTermsViolationTermParserRuleCall_16_1_0());
					}
					lv_violationTerms_19_0=ruleViolationTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractRule());
						}
						add(
							$current,
							"violationTerms",
							lv_violationTerms_19_0,
							"uk.ac.kcl.inf.ISCL.ViolationTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_20=','
				{
					newLeafNode(otherlv_20, grammarAccess.getContractAccess().getCommaKeyword_16_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContractAccess().getViolationTermsViolationTermParserRuleCall_16_2_1_0());
						}
						lv_violationTerms_21_0=ruleViolationTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContractRule());
							}
							add(
								$current,
								"violationTerms",
								lv_violationTerms_21_0,
								"uk.ac.kcl.inf.ISCL.ViolationTerm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getContractAccess().getRightCurlyBracketKeyword_17());
		}
	)
;

// Entry rule entryRulePaymentTerm
entryRulePaymentTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPaymentTermRule()); }
	iv_rulePaymentTerm=rulePaymentTerm
	{ $current=$iv_rulePaymentTerm.current; }
	EOF;

// Rule PaymentTerm
rulePaymentTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Amount of'
		{
			newLeafNode(otherlv_0, grammarAccess.getPaymentTermAccess().getAmountOfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPaymentTermAccess().getPremiumREALParserRuleCall_1_0());
				}
				lv_premium_1_0=ruleREAL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPaymentTermRule());
					}
					set(
						$current,
						"premium",
						lv_premium_1_0,
						"uk.ac.kcl.inf.ISCL.REAL");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='payable every'
		{
			newLeafNode(otherlv_2, grammarAccess.getPaymentTermAccess().getPayableEveryKeyword_2());
		}
		(
			(
				lv_period_3_0=RULE_INT
				{
					newLeafNode(lv_period_3_0, grammarAccess.getPaymentTermAccess().getPeriodINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPaymentTermRule());
					}
					setWithLastConsumed(
						$current,
						"period",
						lv_period_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='days'
		{
			newLeafNode(otherlv_4, grammarAccess.getPaymentTermAccess().getDaysKeyword_4());
		}
		(
			(
				lv_increase_5_0=RULE_INT
				{
					newLeafNode(lv_increase_5_0, grammarAccess.getPaymentTermAccess().getIncreaseINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPaymentTermRule());
					}
					setWithLastConsumed(
						$current,
						"increase",
						lv_increase_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='%'
		{
			newLeafNode(otherlv_6, grammarAccess.getPaymentTermAccess().getPercentSignKeyword_6());
		}
		otherlv_7='increase per claim'
		{
			newLeafNode(otherlv_7, grammarAccess.getPaymentTermAccess().getIncreasePerClaimKeyword_7());
		}
	)
;

// Entry rule entryRuleClaimTerm
entryRuleClaimTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClaimTermRule()); }
	iv_ruleClaimTerm=ruleClaimTerm
	{ $current=$iv_ruleClaimTerm.current; }
	EOF;

// Rule ClaimTerm
ruleClaimTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Amount of'
		{
			newLeafNode(otherlv_0, grammarAccess.getClaimTermAccess().getAmountOfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClaimTermAccess().getClaimREALParserRuleCall_1_0());
				}
				lv_claim_1_0=ruleREAL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClaimTermRule());
					}
					set(
						$current,
						"claim",
						lv_claim_1_0,
						"uk.ac.kcl.inf.ISCL.REAL");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='claimed'
		{
			newLeafNode(otherlv_2, grammarAccess.getClaimTermAccess().getClaimedKeyword_2());
		}
		(
			otherlv_3='by'
			{
				newLeafNode(otherlv_3, grammarAccess.getClaimTermAccess().getByKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClaimTermRule());
						}
					}
					otherlv_4=RULE_ADDRESS
					{
						newLeafNode(otherlv_4, grammarAccess.getClaimTermAccess().getClaimerCustomerCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleViolationTerm
entryRuleViolationTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getViolationTermRule()); }
	iv_ruleViolationTerm=ruleViolationTerm
	{ $current=$iv_ruleViolationTerm.current; }
	EOF;

// Rule ViolationTerm
ruleViolationTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getViolationTermAccess().getContractCancellationTermParserRuleCall_0());
		}
		this_ContractCancellationTerm_0=ruleContractCancellationTerm
		{
			$current = $this_ContractCancellationTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getViolationTermAccess().getClaimReductionTermParserRuleCall_1());
		}
		this_ClaimReductionTerm_1=ruleClaimReductionTerm
		{
			$current = $this_ClaimReductionTerm_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getViolationTermAccess().getPremiumIncreaseTermParserRuleCall_2());
		}
		this_PremiumIncreaseTerm_2=rulePremiumIncreaseTerm
		{
			$current = $this_PremiumIncreaseTerm_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContractCancellationTerm
entryRuleContractCancellationTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractCancellationTermRule()); }
	iv_ruleContractCancellationTerm=ruleContractCancellationTerm
	{ $current=$iv_ruleContractCancellationTerm.current; }
	EOF;

// Rule ContractCancellationTerm
ruleContractCancellationTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_cancelled_0_0='cancelled'
			{
				newLeafNode(lv_cancelled_0_0, grammarAccess.getContractCancellationTermAccess().getCancelledCancelledKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getContractCancellationTermRule());
				}
				setWithLastConsumed($current, "cancelled", true, "cancelled");
			}
		)
	)
;

// Entry rule entryRuleClaimReductionTerm
entryRuleClaimReductionTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClaimReductionTermRule()); }
	iv_ruleClaimReductionTerm=ruleClaimReductionTerm
	{ $current=$iv_ruleClaimReductionTerm.current; }
	EOF;

// Rule ClaimReductionTerm
ruleClaimReductionTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='claim reduced by'
		{
			newLeafNode(otherlv_0, grammarAccess.getClaimReductionTermAccess().getClaimReducedByKeyword_0());
		}
		(
			(
				lv_claimReduction_1_0=RULE_INT
				{
					newLeafNode(lv_claimReduction_1_0, grammarAccess.getClaimReductionTermAccess().getClaimReductionINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClaimReductionTermRule());
					}
					setWithLastConsumed(
						$current,
						"claimReduction",
						lv_claimReduction_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='%'
		{
			newLeafNode(otherlv_2, grammarAccess.getClaimReductionTermAccess().getPercentSignKeyword_2());
		}
	)
;

// Entry rule entryRulePremiumIncreaseTerm
entryRulePremiumIncreaseTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPremiumIncreaseTermRule()); }
	iv_rulePremiumIncreaseTerm=rulePremiumIncreaseTerm
	{ $current=$iv_rulePremiumIncreaseTerm.current; }
	EOF;

// Rule PremiumIncreaseTerm
rulePremiumIncreaseTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='premium increased by'
		{
			newLeafNode(otherlv_0, grammarAccess.getPremiumIncreaseTermAccess().getPremiumIncreasedByKeyword_0());
		}
		(
			(
				lv_premiumIncrease_1_0=RULE_INT
				{
					newLeafNode(lv_premiumIncrease_1_0, grammarAccess.getPremiumIncreaseTermAccess().getPremiumIncreaseINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPremiumIncreaseTermRule());
					}
					setWithLastConsumed(
						$current,
						"premiumIncrease",
						lv_premiumIncrease_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='%'
		{
			newLeafNode(otherlv_2, grammarAccess.getPremiumIncreaseTermAccess().getPercentSignKeyword_2());
		}
	)
;

// Entry rule entryRuleCustomer
entryRuleCustomer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomerRule()); }
	iv_ruleCustomer=ruleCustomer
	{ $current=$iv_ruleCustomer.current; }
	EOF;

// Rule Customer
ruleCustomer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='customer with address'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomerAccess().getCustomerWithAddressKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ADDRESS
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCustomerAccess().getNameADDRESSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"uk.ac.kcl.inf.ISCL.ADDRESS");
				}
			)
		)
		(
			otherlv_2='is'
			{
				newLeafNode(otherlv_2, grammarAccess.getCustomerAccess().getIsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomerAccess().getCoverageCoverageEnumRuleCall_2_1_0());
					}
					lv_coverage_3_0=ruleCoverage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomerRule());
						}
						set(
							$current,
							"coverage",
							lv_coverage_3_0,
							"uk.ac.kcl.inf.ISCL.Coverage");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='participates with'
			{
				newLeafNode(otherlv_4, grammarAccess.getCustomerAccess().getParticipatesWithKeyword_3_0());
			}
			(
				(
					lv_participation_5_0=RULE_INT
					{
						newLeafNode(lv_participation_5_0, grammarAccess.getCustomerAccess().getParticipationINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCustomerRule());
						}
						setWithLastConsumed(
							$current,
							"participation",
							lv_participation_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_6='%'
			{
				newLeafNode(otherlv_6, grammarAccess.getCustomerAccess().getPercentSignKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleCompany
entryRuleCompany returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompanyRule()); }
	iv_ruleCompany=ruleCompany
	{ $current=$iv_ruleCompany.current; }
	EOF;

// Rule Company
ruleCompany returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with address'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompanyAccess().getWithAddressKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ADDRESS
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCompanyAccess().getNameADDRESSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompanyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"uk.ac.kcl.inf.ISCL.ADDRESS");
				}
			)
		)
	)
;

// Entry rule entryRuleInsurableObject
entryRuleInsurableObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsurableObjectRule()); }
	iv_ruleInsurableObject=ruleInsurableObject
	{ $current=$iv_ruleInsurableObject.current; }
	EOF;

// Rule InsurableObject
ruleInsurableObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='object'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsurableObjectAccess().getObjectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsurableObjectAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsurableObjectRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"uk.ac.kcl.inf.ISCL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='owned by'
			{
				newLeafNode(otherlv_2, grammarAccess.getInsurableObjectAccess().getOwnedByKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInsurableObjectRule());
						}
					}
					otherlv_3=RULE_ADDRESS
					{
						newLeafNode(otherlv_3, grammarAccess.getInsurableObjectAccess().getOwnerCustomerCrossReference_2_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule ContractType
ruleContractType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='personal'
			{
				$current = grammarAccess.getContractTypeAccess().getPersonalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getContractTypeAccess().getPersonalEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='pool'
			{
				$current = grammarAccess.getContractTypeAccess().getPoolEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getContractTypeAccess().getPoolEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='family'
			{
				$current = grammarAccess.getContractTypeAccess().getFamilyEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getContractTypeAccess().getFamilyEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Coverage
ruleCoverage returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='beneficiary'
			{
				$current = grammarAccess.getCoverageAccess().getBeneficiaryEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCoverageAccess().getBeneficiaryEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='owner'
			{
				$current = grammarAccess.getCoverageAccess().getOwnerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCoverageAccess().getOwnerEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ADDRESS : '0x' ('a'..'z'|'A'..'Z'|'0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
