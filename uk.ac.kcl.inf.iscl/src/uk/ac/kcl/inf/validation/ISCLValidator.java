/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.validation;

import java.util.List;
import java.util.stream.Stream;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;

import uk.ac.kcl.inf.iSCL.Contract;
import uk.ac.kcl.inf.iSCL.ContractType;
import uk.ac.kcl.inf.iSCL.Coverage;
import uk.ac.kcl.inf.iSCL.Customer;
import uk.ac.kcl.inf.iSCL.InsurableObject;
import uk.ac.kcl.inf.iSCL.ISCLPackage;
import uk.ac.kcl.inf.iSCL.PaymentTerm;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ISCLValidator extends AbstractISCLValidator {
	
	public static final String INVALID_CLAIM = 
			"Customer claim is lower than premium; should be greater";
	public static final String INVALID_PREMIUM_INCREASE = 
			"Invalid premium increase value; must be between 0.0 and 100.0";
	public static final String INVALID_PAYMENT_PERIOD = 
			"Invalid payment period; msut be greater than 0";
	public static final String INVALID_CUSTOMER_PARTICIPATION = 
			"Invalid customer participation in contract; total must be 100%";
	public static final String INVALID_CUSTOMER_NUMBER_PERSONAL = 
			"Invalid customer number; must be 1 for personal contract";
	public static final String UNNECESSARY_PARTICIPATION_SPECIFICATION_PERSONAL_FAMILY =
			"Participation specification is not requred for personal or family contracts";
	public static final String UNSPECIFIED_OWNER_FOR_FAMILY_CONTRACT =
			"Family contracts need to have one, and only one owner";
	public static final String UNSPECIFIED_BENEFICIARIES_FOR_FAMILY_CONTRACT = 
			"Family contracts need to have at least one beneficiary";
	public static final String UNSPECIFIED_OWNERSHIP_FOR_POOL_CONTRACT_CUSTOMERS =
			"Every pool contract customer must be an owner";
	
	
	/**
	 * If contract type is family. Then there needs to be ONE owner and one or more beneficiaries.
	 * 
	 * No participation will be specified. We will just divide the claim among the beneficiaries.
	 * 
	 * @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkFamilyContractCoverage(Contract contract) {

		if(ContractType.FAMILY.equals(contract.getType())){
			
			boolean benExists = contract.getCustomers()
					.stream()
					.anyMatch(c -> Coverage.BENEFICIARY.equals(c.getCoverage()));
			
			if(!benExists)
				error("Family contracts need to have at least one beneficiary", contract,
						ISCLPackage.Literals.CONTRACT__CUSTOMERS, UNSPECIFIED_BENEFICIARIES_FOR_FAMILY_CONTRACT);
			
			
			int ownerCount = (int) contract.getCustomers()
					.stream()
					.filter(c -> Coverage.OWNER.equals(c.getCoverage()))
					.count();
			
			if(ownerCount != 1)
				error("Family contracts need to have exactly one owner", contract,
						ISCLPackage.Literals.CONTRACT__CUSTOMERS, UNSPECIFIED_OWNER_FOR_FAMILY_CONTRACT);
			
		}		
	}	
	
	
	/**
	 * If contract type is pool then all the customers must be owners.
	 * 
	 * They are all owners of the insured object. Note that participations must be
	 * specified in this case.
	 * 
	 * @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkPoolOnlyHasOwners(Contract contract) {

		if(ContractType.POOL.equals(contract.getType())){
						
			 int ownerCount = (int)contract.getCustomers()
					.stream()
					.filter(c -> Coverage.OWNER.equals(c.getCoverage()))
					.count();
			
			 if(ownerCount != contract.getCustomers().size())
				 error("Pool contracts should only consist of owners", contract,
						 ISCLPackage.Literals.CONTRACT__CUSTOMERS, UNSPECIFIED_OWNERSHIP_FOR_POOL_CONTRACT_CUSTOMERS);		
		}		
	}
	
	
	/**
	 * Check if customer claim is greater than premium paid.
	 * 
	 * No contract where the claim is less than the premium should be
	 * allowed.
	 * 
	 * @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkClaimLargerThanPremium(Contract contract) {
		float claim = contract.getClaimTerm().getClaim();
		float premium = contract.getPaymentTerm().getPremium();
		
		if (premium > claim)
			error("Customer claim needs to be greater than premium paid", contract, 
					ISCLPackage.Literals.CONTRACT__CLAIM_TERM, INVALID_CLAIM);

	}
	
	/**
	 * Payment term premium increase must be between 0.0% and 100.0%.
	 * 
	 * This increase applies only if a claim has been made.
	 * 
	 * @param paymentTerm
	 */
	@Check(CheckType.NORMAL)
	public void checkIncreaseIsBetweenZeroAndOneHundred(PaymentTerm paymentTerm) {
		float premiumIncrease = paymentTerm.getIncrease();
		
		if (premiumIncrease < 0.0 || premiumIncrease > 100.0)
			error("Premium increase needs to be a value between 0.0 and 100.0", paymentTerm, 
					ISCLPackage.Literals.PAYMENT_TERM__INCREASE, INVALID_PREMIUM_INCREASE);

	}
	
	
	/**
	 * Iterate over customers and sum participation percentages. Check they are equal to 100%.
	 * 
	 * Only applicable to pool contracts.
	 * 
	 * Note:
	 *   
	 *   The error will point to the first customer in the contract; this customer is not necessarily
	 *   the one for which the change in participation must be made.
	 * 
	 * @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkCustomerParticipationIsOneHundredProcentForPoolContract(Contract contract) {
		if (ContractType.POOL.equals(contract.getType())) {
			
			double totalCustomerParticipation = contract.getCustomers()
					.stream()
					.mapToDouble(c -> c.getParticipation())
					.sum(); 
							
			if (totalCustomerParticipation != 100.0) 
				error("Invalid customer participation; must be a total of 100.0%;"
						+ " but is " + totalCustomerParticipation, contract,
						ISCLPackage.Literals.CONTRACT__CUSTOMERS, INVALID_CUSTOMER_PARTICIPATION);
			
		}
	}
	
	
	/**
	 * Check if premium period is not zero or less than zero.
	 * 
	 * Premium period must always be a positive number (days between payments).
	 * 
	 * @param paymentTerm
	 */
	@Check(CheckType.NORMAL)
	public void checkPremiumPeriodIsNotZero(PaymentTerm paymentTerm) {
		int premiumPeriod = paymentTerm.getPeriod();
		
		if (premiumPeriod <= 0)
			error("Premium period needs to be greater than 0", paymentTerm, 
					ISCLPackage.Literals.PAYMENT_TERM__PERIOD, INVALID_PAYMENT_PERIOD);
		
	}
	 
		
	/**
	 * If contract type is personal then check that there exists only one customer.
	 * 
	 * His participation is optional in this case and should default to 100%
	 * 
	 *  @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkOnlyOneCustomerForPersonalContract(Contract contract) {
		if (contract.getType() == ContractType.PERSONAL) 
			if (contract.getCustomers().size() != 1) 
				error("Personal contract needs to have only one customer", contract,
						ISCLPackage.Literals.CONTRACT__CUSTOMERS, INVALID_CUSTOMER_NUMBER_PERSONAL);								
	}
	

	
	/**
	 * For family and personal contracts, participation is automatically calculated
	 * Throw a warning if a custom value is provided
	 * 
	 * This validation is a warning. If any participation percentages are specified
	 * they will be ignored in the generator.
	 * 
	 * @param contract
	 */
	@Check(CheckType.NORMAL)
	public void checkForUnnecessaryParticipationsInPersonalAndFamilyContracts(Contract contract) {
		if (ContractType.FAMILY.equals(contract.getType()) || ContractType.PERSONAL.equals(contract.getType())) 						
			for (Customer c : contract.getCustomers()) 
				if (c.getParticipation() != 0.0) 
					warning("No participation needs to be specified for personal or family contracts; "
							+ "Sum is split equally among the beneficiaries", contract, 
							ISCLPackage.Literals.CONTRACT__CUSTOMERS, UNNECESSARY_PARTICIPATION_SPECIFICATION_PERSONAL_FAMILY);
	}
	
}
