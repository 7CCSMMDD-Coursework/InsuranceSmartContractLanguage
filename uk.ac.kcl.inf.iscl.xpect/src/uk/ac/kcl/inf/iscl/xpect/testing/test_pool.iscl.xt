/* XPECT_SETUP uk.ac.kcl.inf.iscl.xpect.testing.XPectTests END_SETUP */
/*
XPECT generated file pool.sol ---
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract PoolInsurance {
	
	
	address payable[] customers;			    
	mapping(address => uint256) private participations;
	uint256 private totalPremiumReleased;
	
	address payable company = payable(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);			
				
	uint256 private paymentPeriod = 10 days;
	uint256 private premiumIncrease = 25;			
	uint256 private claimAmount = 30.0 ether;			
	uint256 private premiumAmount = 10.0 ether;			
	uint256 private lastPayment;
	uint256 public numClaims;			
	
	enum ContractState { ACTIVE, INACTIVE, BLOCKED }
	ContractState public contractState;
				
	constructor() {
	
	    numClaims = 0;
	    totalPremiumReleased = 0;
	    lastPayment = block.timestamp;
	    contractState = ContractState.INACTIVE;
	
	    customers.push(payable(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2));
	    participations[customers[0]] = 20;
	    customers.push(payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db));
	    participations[customers[1]] = 35;
	    customers.push(payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB));
	    participations[customers[2]] = 45;
	
	}
	
	function pay() public payable {
	
	    if(lastPayment + paymentPeriod < block.timestamp) {
			claimAmount = claimAmount * (100 - 10)/100;
		}
		
	
	    if(lastPayment + paymentPeriod < block.timestamp) {
			premiumAmount = premiumAmount * (100 + 5)/100;
		}
		
	    require(participations[msg.sender] > 0, "This address is not a contract participant");
	
	    require(msg.value == getPremium(), "Incorrect premium. Invoke the getPremium function to see the required amount");
	
	    totalPremiumReleased += msg.value;
	
	    if(totalPremiumReleased == getTotalPremium()){
		    company.transfer(totalPremiumReleased);
		    contractState = ContractState.ACTIVE;
			lastPayment = block.timestamp;
			totalPremiumReleased = 0;
		}
	
	}
				
	function claim() public payable {
	
	    require(contractState == ContractState.ACTIVE, "Premium payment required. Only an active contract can be claimed");
	
	    require(msg.sender == company, "Claims can only be initiated by the insurer");
	
	    require(msg.value == claimAmount, "Incorrect claim. Invoke the getClaim function to see the required amount");
	
	    for (uint i = 0; i < customers.length; i++) {
			address payable customer = customers[i];
		    customer.transfer(claimAmount * participations[customer]/100);
		}
	
	    numClaims++;
	
	}
	
	function getPremium() public view returns (uint256 premium) {
	    require(participations[msg.sender] > 0, "This address is not a contract participant");
		return getTotalPremium() * participations[msg.sender]/100;
	}
	
	function getTotalPremium() private view returns (uint256 premium) {
		return ((premiumIncrease * numClaims)/100 + 1) * premiumAmount;
	}
	
	function getClaim() public view returns (uint256 the_claim) {
		return claimAmount;
	}
	
}

---
*/
pool contract PoolInsurance between 
company with address 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 and 
customer with address 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2 is owner participates with 20%,
customer with address 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db is owner participates with 35%,
customer with address 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB is owner participates with 45%
for object tesla
Terms {
	Amount of 10.0 payable every 10 days 25% increase per claim
	Amount of 30.0 claimed
	Upon violation claim reduced by 10%, premium increased by 5%
}